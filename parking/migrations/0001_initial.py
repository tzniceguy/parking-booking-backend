# Generated by Django 5.2 on 2025-04-22 22:49

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('users', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ParkingLot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('address', models.CharField(max_length=100)),
                ('latitude', models.DecimalField(decimal_places=6, max_digits=9)),
                ('longitude', models.DecimalField(decimal_places=6, max_digits=9)),
                ('total_spots', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('description', models.TextField(blank=True, max_length=500)),
                ('opening_hours', models.TimeField()),
                ('closing_hours', models.TimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('operator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='managed_lots', to='users.parkingoperator')),
            ],
            options={
                'verbose_name': 'Parking Lot',
                'verbose_name_plural': 'Parking Lots',
            },
        ),
        migrations.CreateModel(
            name='ParkingSpot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('spot_number', models.CharField(max_length=10)),
                ('spot_type', models.CharField(choices=[('standard', 'Standard'), ('compact', 'Compact'), ('handicap', 'Handicap'), ('electric', 'Electric Vehicle'), ('motorcycle', 'Motorcycle'), ('reserved', 'Reserved')], max_length=20)),
                ('hourly_rate', models.DecimalField(decimal_places=2, max_digits=6, validators=[django.core.validators.MinValueValidator(1)])),
                ('is_available', models.BooleanField(default=True)),
                ('lot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='spots', to='parking.parkinglot')),
            ],
            options={
                'verbose_name': 'Parking Spot',
                'verbose_name_plural': 'Parking Spots',
            },
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('booking_time', models.DateTimeField(auto_now_add=True)),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('duration', models.DurationField()),
                ('cost', models.DecimalField(decimal_places=2, max_digits=8)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('active', 'Active'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='users.motorist')),
                ('parking_spot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='parking.parkingspot')),
            ],
            options={
                'verbose_name': 'Booking',
                'verbose_name_plural': 'Bookings',
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('comment', models.TextField(blank=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('booking', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='parking.booking')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='users.motorist')),
            ],
            options={
                'verbose_name': 'Review',
                'verbose_name_plural': 'Reviews',
            },
        ),
        migrations.CreateModel(
            name='Vehicle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('license_plate', models.CharField(max_length=20)),
                ('vehicle_type', models.CharField(choices=[('sedan', 'Sedan'), ('suv', 'SUV'), ('truck', 'Truck'), ('motorcycle', 'Motorcycle'), ('van', 'Van'), ('other', 'Other')], max_length=20)),
                ('make', models.CharField(max_length=30)),
                ('model', models.CharField(max_length=30)),
                ('color', models.CharField(max_length=30)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vehicles', to='users.motorist')),
            ],
            options={
                'verbose_name': 'Vehicle',
                'verbose_name_plural': 'Vehicles',
            },
        ),
        migrations.AddField(
            model_name='booking',
            name='vehicle',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='parking.vehicle'),
        ),
        migrations.AddIndex(
            model_name='parkinglot',
            index=models.Index(fields=['latitude', 'longitude'], name='parking_par_latitud_e65c65_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='parkingspot',
            unique_together={('lot', 'spot_number')},
        ),
        migrations.AlterUniqueTogether(
            name='review',
            unique_together={('booking', 'user')},
        ),
        migrations.AlterUniqueTogether(
            name='vehicle',
            unique_together={('user', 'license_plate')},
        ),
        migrations.AlterUniqueTogether(
            name='booking',
            unique_together={('parking_spot', 'start_time', 'end_time')},
        ),
    ]
